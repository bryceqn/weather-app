{"version":3,"sources":["components/SearchBar.js","components/CityCard.js","components/CityContainer.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","getWeather","useState","query","setQuery","type","placeholder","value","onChange","event","target","onKeyPress","key","CityCard","city","deleteCard","selectCard","unit","Object","keys","length","onClick","className","isSelected","stopPropagation","location","name","region","country","Math","round","weather","temp_f","temp_c","id","src","icon","alt","desc","CityContainer","cities","map","Forecast","forecastData","filter","c","forecast","weekdays","displayDate","day","date","Date","dt","dayOfWeek","getDay","dayofMonth","getDate","console","log","displayTemp","maxTemp","temp","max","minTemp","min","App","setCities","currentUnit","setCurrentUnit","a","url","fetch","response","ok","alert","status","json","data","lat","lon","newCity","current","condition","text","long","daily","citiesCopy","newCities","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e781e0e7.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nfunction SearchBar({getWeather}) {\n\n    const [query, setQuery] = useState(\"\");\n\n    const handleEnter = (event) => {\n        if (event.key === \"Enter\") {\n            getWeather(query);\n            setQuery(\"\");\n        }\n    }\n\n    return (\n        <div>\n            <input \n                type=\"text\" \n                placeholder=\"Search City or Zip Code\" \n                value={query}\n                onChange={(event) => setQuery(event.target.value)}\n                onKeyPress={handleEnter}\n            ></input>\n            \n        </div>\n    );\n\n}\n\nexport default SearchBar;","import React from 'react';\n\nfunction CityCard({ city, deleteCard, selectCard, unit }) {\n\n    const handleDelete = (event) => {\n        deleteCard(city);\n        event.stopPropagation();\n    }\n\n    const handleSelect = () => {\n        selectCard(city)\n    }\n\n    return(\n    (Object.keys(city).length !== 0) ?\n        (<div onClick={handleSelect}>\n            <div className={city.isSelected ? \"city-card-selected\" : \"city-card\"}>\n                <div className=\"btn-container\">\n                        <button className={city.isSelected ? \"delete-btn-selected\" : \"delete-btn\"} onClick={handleDelete}>\n                            <i className=\"fa fa-close\"></i>\n                        </button>\n                </div>\n                <p className=\"location\">{city.location.name}, {(city.location.region !== \"\") ? city.location.region : city.location.country}</p>\n                <p className=\"temp\">{(unit === \"F\") ? Math.round(city.weather.temp_f) : Math.round(city.weather.temp_c)}&deg;{unit}</p>\n                <img id=\"main-cond\" src={`http://openweathermap.org/img/wn/${city.weather.icon}@2x.png`} alt=\"icon\" />\n                <p className=\"description\">{city.weather.desc}</p>     \n            </div>\n        </div>\n        ) : null\n    );\n}\n\nexport default CityCard;","import React from 'react';\nimport CityCard from './CityCard';\n\nfunction CityContainer( {cities, deleteCard, selectCard, unit }) {\n\n    return (\n        <div className=\"cities-container\">\n            {cities.map(city => <CityCard deleteCard={deleteCard} selectCard={selectCard} city={city} unit={unit}/>)}\n        </div>\n    );\n\n}\n\nexport default CityContainer;","import React from 'react';\n\nfunction Forecast({cities, unit}) {\n\n    const forecastData = (cities.filter(c => c.isSelected))[0].forecast;\n\n    \n    const weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n    const displayDate = (day) => {\n        let date = new Date(day.dt * 1000);\n        let dayOfWeek = weekdays[date.getDay()];\n        let dayofMonth = date.getDate();\n        console.log(day.weather.icon);\n        return (\n            <div>\n                <span className=\"day-of-week\">{dayOfWeek} </span>\n                <span className=\"day-of-month\">{dayofMonth}</span>\n            </div>\n        );\n    }\n\n    const displayTemp = (day) => {\n        let maxTemp = Math.round(day.temp.max);\n        let minTemp = Math.round(day.temp.min);\n        if (unit === \"C\") {\n            maxTemp = Math.round((maxTemp - 32) * (5/9))  \n            minTemp = Math.round((minTemp - 32) * (5/9));  \n        }\n        return (\n            <p className=\"max-min-temps\">{maxTemp}&deg;/{minTemp}&deg;</p>\n        );\n    }\n\n    return (\n        <div className=\"forecast-container\">\n            {forecastData.map(day => (\n                                <div className=\"forecast-card\">\n                                        {displayDate(day)}\n                                        <img src={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}/>\n                                        {displayTemp(day)}\n                                </div>))\n            }\n        </div>\n    );\n\n}\n\nexport default Forecast;","import React, { useState, useEffect }from 'react';\nimport SearchBar from './components/SearchBar';\nimport CityContainer from './components/CityContainer';\nimport Forecast from './components/Forecast';\n\nfunction App() {\n\n  const [cities, setCities] = useState([]);\n  const [currentUnit, setCurrentUnit] = useState(\"F\");\n\n  const getWeather = async (query) => {\n    try {\n      if (cities.length === 4) {\n        return;\n      }\n      let url = `https://api.weatherapi.com/v1/current.json?key=aa59dfe7f903424ead2132024210109&q=${query}`;\n      let response = await fetch(url);\n      if (!response.ok) {\n        alert(\"The status is wrong! Expected: 200, Was: \" + response.status);\n        return;\n      }\n      let data = await response.json();\n\n      url = `https://api.openweathermap.org/data/2.5/onecall?lat=${data.location.lat}&lon=${data.location.lon}&appid=eaf5b769f543ae241ec6dbf053eafaea&units=imperial`\n      response = await fetch(url);\n      if (!response.ok) {\n        alert(\"The status is wrong! Expected: 200, Was: \" + response.status);\n        return;\n      }\n      \n      let forecastData = await response.json();\n\n      let newCity = \n              {isSelected: true,\n              weather: \n                  {temp_f: data.current.temp_f, \n                  temp_c: data.current.temp_c,\n                  desc: data.current.condition.text,\n                  icon: forecastData.current.weather[0].icon},\n\n              location: \n                  {name: data.location.name,\n                  region: data.location.region,\n                  country: data.location.country,\n                  lat: data.location.lat,\n                  long: data.location.lon},\n                \n                forecast: forecastData.daily};\n\n      const citiesCopy = cities.map(c => ({...c, isSelected: false}));     \n      setCities([...citiesCopy, newCity]);\n\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  const deleteCard = (city) => {\n    let newCities = cities.filter(c => c !== city);\n    if (city.isSelected && newCities.length > 0) {\n      newCities[0].isSelected = true;\n    }\n    setCities(newCities);\n  }\n\n  const selectCard = (city) => {\n    const citiesCopy = cities.map(c => ({...c, isSelected: false}));\n    let index = cities.indexOf(city);\n    citiesCopy[index].isSelected = true;\n    setCities(citiesCopy);\n  }\n\n  const handleClick = () => {\n    if (currentUnit === \"F\") {\n        setCurrentUnit(\"C\");\n    } else {\n        setCurrentUnit(\"F\");\n    }\n}\n  \n  return (\n    <div className=\"App\">\n      <button onClick={handleClick} className=\"units-btn\">&deg;{currentUnit}</button>\n      <img id=\"appicon\" src=\"https://image.flaticon.com/icons/png/512/2204/2204335.png\" alt=\"appicon\"></img>\n      <h1 className=\"title\">Weather App</h1>\n      <SearchBar getWeather={getWeather}/>\n\n      <CityContainer \n        cities={cities}\n        deleteCard={deleteCard}\n        selectCard={selectCard}\n        unit={currentUnit}/>\n\n\n        {(cities.length !== 0) ? (<Forecast cities={cities} unit={currentUnit}/>) : null}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}